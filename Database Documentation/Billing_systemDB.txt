CREATE OR REPLACE FUNCTION profileFreeUnits(profileID integer) RETURNS SETOF free_units AS $$
DECLARE
BEGIN
	RETURN QUERY(SELECT * FROM free_units WHERE pid=profileID);
END
$$LANGUAGE plpgsql;

SELECT * FROM profileFreeUnits(1);
------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION customerRemainedFreeUnits(profileID integer, dialNum text)RETURNS SETOF customer_profile AS $$
DECLARE 
BEGIN
	RETURN QUERY(SELECT * FROM customer_profile WHERE msisdn=dialNum AND pid=profileID);
END
$$LANGUAGE plpgsql;

SELECT * FROM customerRemainedFreeUnits(1,'01215860927');
------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION customerUDR(dialNum text)RETURNS SETOF udr AS $$
DECLARE
	timestamp text;
BEGIN
	RETURN QUERY(SELECT * FROM udr WHERE dialA=dialNum ORDER BY TO_DATE(start_date, 'DD/MM/YYYY'));
END
$$LANGUAGE plpgsql;
--------------------------------------------------------------------------------------------------------------------------------------
used in Database class as sqlcommand:
SELECT udr_id,( start_date || ' ' || start_time)::timestamp FROM udr WHERE dialA=dialNum ORDER BY timestamp;
-------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION udrRow(udrID integer) RETURNS SETOF udr AS $$
DECLARE
BEGIN
	RETURN QUERY(SELECT * FROM udr WHERE udr_id = udrID);
END
$$LANGUAGE plpgsql;

SELECT * FROM udrRow(3);
-------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION updateCustomerFUs(dialNum text,profileID integer,serviceID integer,quantity integer, netConnection text)RETURNS Boolean AS $$
DECLARE
BEGIN
	if  serviceID = 1  THEN
		IF netConnection = 'onNet' THEN 
			UPDATE customer_profile SET free_voice_same = quantity WHERE msisdn = dialNum AND pid = profileID;
		ELSIF netConnection = 'crossNet' THEN
			UPDATE customer_profile SET free_voice_diff = quantity WHERE msisdn = dialNum AND pid = profileID;
		END IF;
		UPDATE udr SET is_billed = true WHERE diala = dialNum AND pid = profileID AND sid = serviceID;	
		RETURN true; 
	elsif serviceID = 2 THEN
		IF netConnection = 'onNet' THEN 
			UPDATE customer_profile SET free_sms_same = quantity WHERE msisdn = dialNum AND pid = profileID;
		ELSIF netConnection = 'crossNet' THEN
			UPDATE customer_profile SET free_sms_diff = quantity WHERE msisdn = dialNum AND pid = profileID;
		END IF;
		UPDATE udr SET is_billed = true WHERE diala = dialNum AND pid = profileID AND sid = serviceID;
		RETURN true;
	elsif serviceID = 3 THEN 
		UPDATE customer_profile SET free_internet = quantity WHERE msisdn = dialNum AND pid = profileID;
		UPDATE udr SET is_billed = true WHERE diala = dialNum AND pid = profileID AND sid = serviceID;
		RETURN true;
	ELSE 
		RETURN false;
	END IF; 
END;
$$LANGUAGE plpgsql;

----------------------
billing_system=# update customer_profile set free_voice_same=300 WHERE msisdn='00201215860927' AND pid=1;
UPDATE 1
billing_system=# update customer_profile set free_voice_diff=100 WHERE msisdn='00201215860927' AND pid=1;
UPDATE 1
billing_system=# update customer_profile set free_sms_diff=50 WHERE msisdn='00201215860927' AND pid=1;
UPDATE 1
billing_system=# update customer_profile set free_sms_same=100 WHERE msisdn='00201215860927' AND pid=1;
UPDATE 1
billing_system=# update customer_profile set free_internet=50 WHERE msisdn='00201215860927' AND pid=1;
----------------------

SELECT updateCustomerFUs('00201215860927',1,3,50,'cros');
SELECT updateCustomerFUs('+201215860927',1,3,100,'onNet');
SELECT updateCustomerFUs('+201215860927',1,1,500,'cr');
-------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION retrieveProfileServices(profileID integer,serviceID integer)RETURNS SETOF profile_services AS $$
DECLARE
BEGIN
	RETURN QUERY(SELECT * FROM profile_services WHERE pid=profileID AND sid=serviceID);
END;
$$LANGUAGE plpgsql;

SELECT * FROM retrieveProfileServices(1,3);
-----------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION retrieveAllCustomersHaveUDRs() RETURNS TABLE(dialNum text,profileID integer) AS $$
DECLARE
BEGIN
	RETURN QUERY(SELECT DISTINCT diala,pid  FROM udr);
END;
$$LANGUAGE plpgsql;

SELECT * FROM retrieveAllCustomersHaveUDRs();
----------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION retieveProfileDetails(profileID integer) RETURNS SETOF profile AS $$
DECLARE
BEGIN
	RETURN QUERY(SELECT * FROM profile WHERE pid = profileID);
END;
$$LANGUAGE plpgsql;


SELECT * FROM retieveProfileDetails(1);
-------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION retrieveCustomerDetails(DialNum text)RETURNS SETOF customer AS $$
DECLARE
BEGIN
	RETURN QUERY(SELECT * FROM customer WHERE msisdn=DialNum);
END;
$$LANGUAGE plpgsql;

SELECT * FROM retrieveCustomerDetails('00201215860927');
-----------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION insertBillSheet(customerName text,cAddress text,pName text, profileFees float, oneTimeFee float,recurringFees float,
 totalVoiceCost float, totalSMSCost float , totalDataCost float,totalInvoiceBefore float, totalInvoiceAfter float , billDate date) RETURNS Boolean AS $$
DECLARE
BEGIN
	INSERT INTO invoiceSheet (customer_name, address, p_name, pfees, osfee, recurring_fees, total_voice_cost, total_sms_cost,
		total_data_cost,total_invoice_before, total_invoice_after, bill_date) 
		VALUES (customerName, cAddress, pName, profileFees, oneTimeFee, recurringFees, totalVoiceCost, totalSMSCost, totalDataCost,
		totalInvoiceBefore, totalInvoiceAfter, billDate);

 	RETURN true;
END;
$$LANGUAGE plpgsql;

SELECT insertBillSheet('May Hassan', 'sadn@jjkas','Res200', 200, 250, 50, 100.95, 150.34, 70.54,
		821.83, 904.013, '2020-04-30');

INSERT INTO invoiceSheet (customer_name, address,p_name, pfees, osfee, recurring_fees, total_voice_cost, total_sms_cost,
		total_data_cost,total_invoice_before, total_invoice_after, bill_date) 
		VALUES ('Mayar Hassan', 'sadnaskjd@jjkas','Red200', 200, 250, 50, 100.95, 150.34, 70.54,
		821.83, 904.013, '2020-04-30');
--------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION checkIfCustomerBilledBefore(dialNum text,billDate date) RETURNS Boolean AS $$
DECLARE
	is_billed integer;
BEGIN
	SELECT COUNT(customer_name) INTO is_billed FROM invoicesheet WHERE customer_number = dialNum AND  bill_date = billDate;
	IF is_billed = 0
	THEN
		return true;
	ELSE
		return false;
	END IF;
END;
$$LANGUAGE plpgsql;


SELECT checkIfCustomerBilledBefore('0020100343453','2020-04-30');
------------------------------------------------------------------------------------------------------------------------------------------------------------
////////////////////////////////////////////////////////END//////////////////////////////////////////////////////////////////////////